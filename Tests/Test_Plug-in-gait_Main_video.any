//define = [
//  {'TLEM_VERSION':'"2.0"'}, 
//  {'TLEM_VERSION':'"1.1"'}, 
//]
//ignore_errors = ['FileReader.FileName']

#path AMMR_PATH "C:\Users\mel\Documents\AMMRs\ammr-beta"

#include "C:\Users\mel\Documents\anyscript_videomaker\CameraClassTemplate.any"

// Test related setup.
#ifndef TLEM_VERSION
#define TLEM_VERSION "2.0"
#endif

#include "libdef.any"


#path TEMP_PATH "Output"
#ifdef TEST_NAME
#define MOCAP_OUTPUT_FILENAME_PREFIX TEST_NAME + "_"
#else
#define MOCAP_OUTPUT_FILENAME_PREFIX "GUI_"
#endif
#path MOCAP_C3D_DATA_PATH "../Examples/Plug-in-gait"

// Run Analysis with a reduced number of time steps
// to make test go faster. 
#define N_STEP_PARAM_OPT 10
#define N_STEP_KINEMATICS 197
#define N_STEP 100

#include "../Examples/Plug-in-gait/Main.any"


Main = {
  VideoLookAtCamera VideoMaker(VIDEO_NAME="AnyMocap_PlugInGait",
  UP_DIRECTION=y,
  VIDEO_INPUT_SCALE=2,
  COUNTER_FORMAT = "%04d"
  ) =
  { 
    
    AnyVar ts = Main.ModelSetup.TrialSpecificData.tStart;
    AnyVar te = Main.ModelSetup.TrialSpecificData.tEnd;
    AnyVar W = pi/4+2*pi*(Main.Studies.InverseDynamicStudy.t-ts)/(te-ts);
    
    // The camera direction is time dependent to make a rotating camera. 
    LookPoint2Camera_direction = {cos(W), 0.4, sin(W) };
    
    // The point in global reference which the camera looks at. 
    LookAtPoint = Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.r+{0,0,0};
    
    // Override the default camera counter with the time step from the study.
    // This ensures that we only save the images from the analysis. 
    Counter = Main.Studies.InverseDynamicStudy.iStep + floor(0*W);
    
    VerticalFieldOfView = 0.5;
    
    InputFrameRate = floor(0.5*N_STEP/(te-ts));
     
    // The sequence of analysis to make the recording from.
    Analysis = {
      AnyOperation &ref = Main.Studies.InverseDynamicStudy.InverseDynamics;
    };
  };
  
  Main.Studies.InverseDynamicStudy = 
  {
    AnyFolder& Camera_referece = Main.VideoMaker;
  };
  
};


Main = 
{
  AnyOperationSequence  RunTest = 
  {
    AnyOperation& ParameterId =  Main.RunParameterIdentification;
    AnyOperation& RunAnalysis = Main.RunAnalysis; 
  };

  
  
};